#!/usr/bin/env bash
# The travis.yml file runs:
# cat config.sh.template | envsubst > config.sh
# envsubst fills environment variables into the template. This allows environment
# from the travis.yml to be threaded through the build process to generate this
# script.
# The config.sh script allows us to overwrite these functions within the docker
# container, thereby customizing the build for multibuild.

function run_tests {
    # Test whether pytest is already installed.
    # Holy crap bash sucks :(. This conditional took much googling.
    # Hope it's correct.
    pip_modules=`python -m pip list 2> /dev/null`
    if echo "$pip_modules" | grep 'pytest' > /dev/null
    then
        echo 'existing pytest found'
    else
        python -m pip install -U pytest
    fi
    if echo "$pip_modules" | grep 'mock' > /dev/null
    then
        echo 'existing mock found'
    else
        python -m pip install -U mock
    fi
    python -m pytest --tb=native --pyargs "$PACKAGE_NAME"
}


function clean_code {
    local repo_dir=${1:-$REPO_DIR}
    local build_commit=${2:-$BUILD_COMMIT}
    [ -z "$repo_dir" ] && echo "repo_dir not defined" && exit 1
    [ -z "$build_commit" ] && echo "build_commit not defined" && exit 1
    # The package $repo_dir may be a submodule. git submodules do not
    # have a .git directory. If $repo_dir is copied around, tools like
    # Versioneer which require that it be a git repository are unable
    # to determine the version.  Give submodule proper git directory
    fill_submodule "$repo_dir"
    (cd $repo_dir \
        && git fetch origin \
        && git checkout $build_commit \
        && git clean -fxd \
        && git reset --hard \
        && git submodule update --init --recursive)
    python setup.py build_ext --inplace
}



# This is necessary because the Travis OSX environment is old.
export MACOSX_DEPLOYMENT_TARGET="10.7"
